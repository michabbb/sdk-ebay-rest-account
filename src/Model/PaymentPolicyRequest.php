<?php
/**
 * PaymentPolicyRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\account
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.8.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\account\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\account\ObjectSerializer;

/**
 * PaymentPolicyRequest Class Doc Comment
 *
 * @category Class
 * @description This root container defines a seller&#39;s payment business policy for a specific marketplace and category group. This type is used when creating or updating a payment business policy.
 * @package  macropage\SDKs\ebay\rest\account
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentPolicyRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentPolicyRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'categoryTypes' => '\macropage\SDKs\ebay\rest\account\Model\CategoryType[]',
        'deposit' => '\macropage\SDKs\ebay\rest\account\Model\Deposit',
        'description' => 'string',
        'fullPaymentDueIn' => '\macropage\SDKs\ebay\rest\account\Model\TimeDuration',
        'immediatePay' => 'bool',
        'marketplaceId' => 'string',
        'name' => 'string',
        'paymentInstructions' => 'string',
        'paymentMethods' => '\macropage\SDKs\ebay\rest\account\Model\PaymentMethod[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'categoryTypes' => null,
        'deposit' => null,
        'description' => null,
        'fullPaymentDueIn' => null,
        'immediatePay' => null,
        'marketplaceId' => null,
        'name' => null,
        'paymentInstructions' => null,
        'paymentMethods' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'categoryTypes' => false,
		'deposit' => false,
		'description' => false,
		'fullPaymentDueIn' => false,
		'immediatePay' => false,
		'marketplaceId' => false,
		'name' => false,
		'paymentInstructions' => false,
		'paymentMethods' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'categoryTypes' => 'categoryTypes',
        'deposit' => 'deposit',
        'description' => 'description',
        'fullPaymentDueIn' => 'fullPaymentDueIn',
        'immediatePay' => 'immediatePay',
        'marketplaceId' => 'marketplaceId',
        'name' => 'name',
        'paymentInstructions' => 'paymentInstructions',
        'paymentMethods' => 'paymentMethods'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'categoryTypes' => 'setCategoryTypes',
        'deposit' => 'setDeposit',
        'description' => 'setDescription',
        'fullPaymentDueIn' => 'setFullPaymentDueIn',
        'immediatePay' => 'setImmediatePay',
        'marketplaceId' => 'setMarketplaceId',
        'name' => 'setName',
        'paymentInstructions' => 'setPaymentInstructions',
        'paymentMethods' => 'setPaymentMethods'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'categoryTypes' => 'getCategoryTypes',
        'deposit' => 'getDeposit',
        'description' => 'getDescription',
        'fullPaymentDueIn' => 'getFullPaymentDueIn',
        'immediatePay' => 'getImmediatePay',
        'marketplaceId' => 'getMarketplaceId',
        'name' => 'getName',
        'paymentInstructions' => 'getPaymentInstructions',
        'paymentMethods' => 'getPaymentMethods'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('categoryTypes', $data ?? [], null);
        $this->setIfExists('deposit', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('fullPaymentDueIn', $data ?? [], null);
        $this->setIfExists('immediatePay', $data ?? [], null);
        $this->setIfExists('marketplaceId', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('paymentInstructions', $data ?? [], null);
        $this->setIfExists('paymentMethods', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets categoryTypes
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\CategoryType[]|null
     */
    public function getCategoryTypes()
    {
        return $this->container['categoryTypes'];
    }

    /**
     * Sets categoryTypes
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\CategoryType[]|null $categoryTypes This container is used to specify whether the payment business policy applies to motor vehicle listings, or if it applies to non-motor vehicle listings.
     *
     * @return self
     */
    public function setCategoryTypes($categoryTypes)
    {

        if (is_null($categoryTypes)) {
            throw new \InvalidArgumentException('non-nullable categoryTypes cannot be null');
        }

        $this->container['categoryTypes'] = $categoryTypes;

        return $this;
    }

    /**
     * Gets deposit
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\Deposit|null
     */
    public function getDeposit()
    {
        return $this->container['deposit'];
    }

    /**
     * Sets deposit
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\Deposit|null $deposit deposit
     *
     * @return self
     */
    public function setDeposit($deposit)
    {

        if (is_null($deposit)) {
            throw new \InvalidArgumentException('non-nullable deposit cannot be null');
        }

        $this->container['deposit'] = $deposit;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A seller-defined description of the payment business policy. This description is only for the seller's use, and is not exposed on any eBay pages.  <br/><br/><b>Max length</b>: 250
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets fullPaymentDueIn
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\TimeDuration|null
     */
    public function getFullPaymentDueIn()
    {
        return $this->container['fullPaymentDueIn'];
    }

    /**
     * Sets fullPaymentDueIn
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\TimeDuration|null $fullPaymentDueIn fullPaymentDueIn
     *
     * @return self
     */
    public function setFullPaymentDueIn($fullPaymentDueIn)
    {

        if (is_null($fullPaymentDueIn)) {
            throw new \InvalidArgumentException('non-nullable fullPaymentDueIn cannot be null');
        }

        $this->container['fullPaymentDueIn'] = $fullPaymentDueIn;

        return $this;
    }

    /**
     * Gets immediatePay
     *
     * @return bool|null
     */
    public function getImmediatePay()
    {
        return $this->container['immediatePay'];
    }

    /**
     * Sets immediatePay
     *
     * @param bool|null $immediatePay This field should be included and set to <code>true</code> if the seller wants to require immediate payment from the buyer for: <ul><li>A fixed-price item</li><li>An auction item where the buyer is using the 'Buy it Now' option</li><li>A deposit for a motor vehicle listing</li></ul><br /><b>Default:</b> False
     *
     * @return self
     */
    public function setImmediatePay($immediatePay)
    {

        if (is_null($immediatePay)) {
            throw new \InvalidArgumentException('non-nullable immediatePay cannot be null');
        }

        $this->container['immediatePay'] = $immediatePay;

        return $this;
    }

    /**
     * Gets marketplaceId
     *
     * @return string|null
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string|null $marketplaceId The ID of the eBay marketplace to which this payment business policy applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setMarketplaceId($marketplaceId)
    {

        if (is_null($marketplaceId)) {
            throw new \InvalidArgumentException('non-nullable marketplaceId cannot be null');
        }

        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name A seller-defined name for this payment business policy. Names must be unique for policies assigned to the same marketplace.<br /><br /><b>Max length:</b> 64
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets paymentInstructions
     *
     * @return string|null
     */
    public function getPaymentInstructions()
    {
        return $this->container['paymentInstructions'];
    }

    /**
     * Sets paymentInstructions
     *
     * @param string|null $paymentInstructions <p class=\"tablenote\"><b>Note:</b> DO NOT USE THIS FIELD. Payment instructions are no longer supported by payment business policies.</p>A free-form string field that allows sellers to add detailed payment instructions to their listings.
     *
     * @return self
     */
    public function setPaymentInstructions($paymentInstructions)
    {

        if (is_null($paymentInstructions)) {
            throw new \InvalidArgumentException('non-nullable paymentInstructions cannot be null');
        }

        $this->container['paymentInstructions'] = $paymentInstructions;

        return $this;
    }

    /**
     * Gets paymentMethods
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\PaymentMethod[]|null
     */
    public function getPaymentMethods()
    {
        return $this->container['paymentMethods'];
    }

    /**
     * Sets paymentMethods
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\PaymentMethod[]|null $paymentMethods <p class=\"tablenote\"><b>Note:</b> This field applies only when the seller needs to specify one or more offline payment methods. eBay now manages the electronic payment options available to buyers to pay for the item.</p>This array is used to specify one or more offline payment methods that will be accepted for payment that occurs off of eBay's platform.
     *
     * @return self
     */
    public function setPaymentMethods($paymentMethods)
    {

        if (is_null($paymentMethods)) {
            throw new \InvalidArgumentException('non-nullable paymentMethods cannot be null');
        }

        $this->container['paymentMethods'] = $paymentMethods;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


