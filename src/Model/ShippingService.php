<?php
/**
 * ShippingService
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\account
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.8.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\account\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\account\ObjectSerializer;

/**
 * ShippingService Class Doc Comment
 *
 * @category Class
 * @description This type is used by the &lt;b&gt;shippingServices&lt;/b&gt; array, an array that provides details about every domestic and international shipping service option that is defined for the policy.
 * @package  macropage\SDKs\ebay\rest\account
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShippingService implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShippingService';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additionalShippingCost' => '\macropage\SDKs\ebay\rest\account\Model\Amount',
        'buyerResponsibleForPickup' => 'bool',
        'buyerResponsibleForShipping' => 'bool',
        'cashOnDeliveryFee' => '\macropage\SDKs\ebay\rest\account\Model\Amount',
        'freeShipping' => 'bool',
        'shippingCarrierCode' => 'string',
        'shippingCost' => '\macropage\SDKs\ebay\rest\account\Model\Amount',
        'shippingServiceCode' => 'string',
        'shipToLocations' => '\macropage\SDKs\ebay\rest\account\Model\RegionSet',
        'sortOrder' => 'int',
        'surcharge' => '\macropage\SDKs\ebay\rest\account\Model\Amount'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'additionalShippingCost' => null,
        'buyerResponsibleForPickup' => null,
        'buyerResponsibleForShipping' => null,
        'cashOnDeliveryFee' => null,
        'freeShipping' => null,
        'shippingCarrierCode' => null,
        'shippingCost' => null,
        'shippingServiceCode' => null,
        'shipToLocations' => null,
        'sortOrder' => 'int32',
        'surcharge' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'additionalShippingCost' => false,
		'buyerResponsibleForPickup' => false,
		'buyerResponsibleForShipping' => false,
		'cashOnDeliveryFee' => false,
		'freeShipping' => false,
		'shippingCarrierCode' => false,
		'shippingCost' => false,
		'shippingServiceCode' => false,
		'shipToLocations' => false,
		'sortOrder' => false,
		'surcharge' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additionalShippingCost' => 'additionalShippingCost',
        'buyerResponsibleForPickup' => 'buyerResponsibleForPickup',
        'buyerResponsibleForShipping' => 'buyerResponsibleForShipping',
        'cashOnDeliveryFee' => 'cashOnDeliveryFee',
        'freeShipping' => 'freeShipping',
        'shippingCarrierCode' => 'shippingCarrierCode',
        'shippingCost' => 'shippingCost',
        'shippingServiceCode' => 'shippingServiceCode',
        'shipToLocations' => 'shipToLocations',
        'sortOrder' => 'sortOrder',
        'surcharge' => 'surcharge'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additionalShippingCost' => 'setAdditionalShippingCost',
        'buyerResponsibleForPickup' => 'setBuyerResponsibleForPickup',
        'buyerResponsibleForShipping' => 'setBuyerResponsibleForShipping',
        'cashOnDeliveryFee' => 'setCashOnDeliveryFee',
        'freeShipping' => 'setFreeShipping',
        'shippingCarrierCode' => 'setShippingCarrierCode',
        'shippingCost' => 'setShippingCost',
        'shippingServiceCode' => 'setShippingServiceCode',
        'shipToLocations' => 'setShipToLocations',
        'sortOrder' => 'setSortOrder',
        'surcharge' => 'setSurcharge'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additionalShippingCost' => 'getAdditionalShippingCost',
        'buyerResponsibleForPickup' => 'getBuyerResponsibleForPickup',
        'buyerResponsibleForShipping' => 'getBuyerResponsibleForShipping',
        'cashOnDeliveryFee' => 'getCashOnDeliveryFee',
        'freeShipping' => 'getFreeShipping',
        'shippingCarrierCode' => 'getShippingCarrierCode',
        'shippingCost' => 'getShippingCost',
        'shippingServiceCode' => 'getShippingServiceCode',
        'shipToLocations' => 'getShipToLocations',
        'sortOrder' => 'getSortOrder',
        'surcharge' => 'getSurcharge'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('additionalShippingCost', $data ?? [], null);
        $this->setIfExists('buyerResponsibleForPickup', $data ?? [], null);
        $this->setIfExists('buyerResponsibleForShipping', $data ?? [], null);
        $this->setIfExists('cashOnDeliveryFee', $data ?? [], null);
        $this->setIfExists('freeShipping', $data ?? [], null);
        $this->setIfExists('shippingCarrierCode', $data ?? [], null);
        $this->setIfExists('shippingCost', $data ?? [], null);
        $this->setIfExists('shippingServiceCode', $data ?? [], null);
        $this->setIfExists('shipToLocations', $data ?? [], null);
        $this->setIfExists('sortOrder', $data ?? [], null);
        $this->setIfExists('surcharge', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additionalShippingCost
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\Amount|null
     */
    public function getAdditionalShippingCost()
    {
        return $this->container['additionalShippingCost'];
    }

    /**
     * Sets additionalShippingCost
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\Amount|null $additionalShippingCost additionalShippingCost
     *
     * @return self
     */
    public function setAdditionalShippingCost($additionalShippingCost)
    {

        if (is_null($additionalShippingCost)) {
            throw new \InvalidArgumentException('non-nullable additionalShippingCost cannot be null');
        }

        $this->container['additionalShippingCost'] = $additionalShippingCost;

        return $this;
    }

    /**
     * Gets buyerResponsibleForPickup
     *
     * @return bool|null
     */
    public function getBuyerResponsibleForPickup()
    {
        return $this->container['buyerResponsibleForPickup'];
    }

    /**
     * Sets buyerResponsibleForPickup
     *
     * @param bool|null $buyerResponsibleForPickup This field should be included and set to <code>true</code> for a motor vehicle listing if it will be the buyer's responsibility to pick up the purchased motor vehicle after full payment is made. This field is only applicable to motor vehicle listings. In the majority of motor vehicle listings, the seller does make the buyer responsible for pickup or shipment of the vehicle. <br/><br/>This field is returned if set.<br/><br/><b>Default</b>: false
     *
     * @return self
     */
    public function setBuyerResponsibleForPickup($buyerResponsibleForPickup)
    {

        if (is_null($buyerResponsibleForPickup)) {
            throw new \InvalidArgumentException('non-nullable buyerResponsibleForPickup cannot be null');
        }

        $this->container['buyerResponsibleForPickup'] = $buyerResponsibleForPickup;

        return $this;
    }

    /**
     * Gets buyerResponsibleForShipping
     *
     * @return bool|null
     */
    public function getBuyerResponsibleForShipping()
    {
        return $this->container['buyerResponsibleForShipping'];
    }

    /**
     * Sets buyerResponsibleForShipping
     *
     * @param bool|null $buyerResponsibleForShipping This field should be included and set to <code>true</code> for a motor vehicle listing if it will be the buyer's responsibility to arrange for shipment of a purchased motor vehicle after full payment is made. This field is only applicable to motor vehicle listings. In the majority of motor vehicle listings, the seller does make the buyer responsible for pickup or shipment of the vehicle. <br/><br/>This field is returned if set.<br/><br/><b>Default</b>: false
     *
     * @return self
     */
    public function setBuyerResponsibleForShipping($buyerResponsibleForShipping)
    {

        if (is_null($buyerResponsibleForShipping)) {
            throw new \InvalidArgumentException('non-nullable buyerResponsibleForShipping cannot be null');
        }

        $this->container['buyerResponsibleForShipping'] = $buyerResponsibleForShipping;

        return $this;
    }

    /**
     * Gets cashOnDeliveryFee
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\Amount|null
     */
    public function getCashOnDeliveryFee()
    {
        return $this->container['cashOnDeliveryFee'];
    }

    /**
     * Sets cashOnDeliveryFee
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\Amount|null $cashOnDeliveryFee cashOnDeliveryFee
     *
     * @return self
     */
    public function setCashOnDeliveryFee($cashOnDeliveryFee)
    {

        if (is_null($cashOnDeliveryFee)) {
            throw new \InvalidArgumentException('non-nullable cashOnDeliveryFee cannot be null');
        }

        $this->container['cashOnDeliveryFee'] = $cashOnDeliveryFee;

        return $this;
    }

    /**
     * Gets freeShipping
     *
     * @return bool|null
     */
    public function getFreeShipping()
    {
        return $this->container['freeShipping'];
    }

    /**
     * Sets freeShipping
     *
     * @param bool|null $freeShipping This field is included and set to <code>true</code> if the seller offers a free shipping option to the buyer. This field can only be included and set to <code>true</code> for the first domestic shipping service option specified in the <b>shippingServices</b> container (it is ignored if set for subsequent shipping services or for any international shipping service option). The first specified shipping service option has a <b>sortOrder</b> value of <code>1</code> or if the <b>sortOrderId</b> field is not used, it is the shipping service option that's specified first in the <b>shippingServices</b> container.<br/><br/>This container is returned if set.
     *
     * @return self
     */
    public function setFreeShipping($freeShipping)
    {

        if (is_null($freeShipping)) {
            throw new \InvalidArgumentException('non-nullable freeShipping cannot be null');
        }

        $this->container['freeShipping'] = $freeShipping;

        return $this;
    }

    /**
     * Gets shippingCarrierCode
     *
     * @return string|null
     */
    public function getShippingCarrierCode()
    {
        return $this->container['shippingCarrierCode'];
    }

    /**
     * Sets shippingCarrierCode
     *
     * @param string|null $shippingCarrierCode This field sets/indicates the shipping carrier, such as <code>USPS</code>, <code>FedEx</code>, or <code>UPS</code>. Although this field uses the <b>string</b> type, the seller must pass in a pre-defined enumeration value here. For a full list of shipping carrier enum values for a specified eBay marketplace, the <b>GeteBayDetails</b> call of the <b>Trading API</b> can be used, and the <b>DetailName</b> field's value should be set to <code>ShippingCarrierDetails</code>. The enum values for each shipping carriers can be found in each <b>ShippingCarrierDetails.ShippingCarrier</b> field in the response payload.<br/><br/> This field is actually optional, as the shipping carrier is also tied into the <b>shippingServiceCode</b> enum value, and that field is required for every specified shipping service option.<br/><br/>This field is returned if set.
     *
     * @return self
     */
    public function setShippingCarrierCode($shippingCarrierCode)
    {

        if (is_null($shippingCarrierCode)) {
            throw new \InvalidArgumentException('non-nullable shippingCarrierCode cannot be null');
        }

        $this->container['shippingCarrierCode'] = $shippingCarrierCode;

        return $this;
    }

    /**
     * Gets shippingCost
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\Amount|null
     */
    public function getShippingCost()
    {
        return $this->container['shippingCost'];
    }

    /**
     * Sets shippingCost
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\Amount|null $shippingCost shippingCost
     *
     * @return self
     */
    public function setShippingCost($shippingCost)
    {

        if (is_null($shippingCost)) {
            throw new \InvalidArgumentException('non-nullable shippingCost cannot be null');
        }

        $this->container['shippingCost'] = $shippingCost;

        return $this;
    }

    /**
     * Gets shippingServiceCode
     *
     * @return string|null
     */
    public function getShippingServiceCode()
    {
        return $this->container['shippingServiceCode'];
    }

    /**
     * Sets shippingServiceCode
     *
     * @param string|null $shippingServiceCode This field sets/indicates the domestic or international shipping service option, such as <code>USPSPriority</code>, <code>FedEx2Day</code>, or <code>UPS3rdDay</code>. Although this field uses the <b>string</b> type, the seller must pass in a pre-defined enumeration value here. For a full list of shipping service option enum values for a specified eBay marketplace, the <b>GeteBayDetails</b> call of the <b>Trading API</b> can be used, and the <b>DetailName</b> field's value should be set to <code>ShippingServiceDetails</code>. The enum values for each shipping service option can be found in each <b>ShippingServiceDetails.ShippingService</b> field in the response payload. The seller must make sure that the shipping service option is still valid, which is indicated by a <code>true</code> value in the corresponding <b>ValidForSellingFlow</b> boolean field. International shipping service options are typically returned at the top of the response payload, and are indicated by an <b>InternationalService</b> boolean field that reads <code>true</code>. The <b>InternationalService</b> boolean field is not returned at all for domestic shipping service options. <br/><br/> This field is required for every specified shipping service option.<br/><br/>This field is returned if set.
     *
     * @return self
     */
    public function setShippingServiceCode($shippingServiceCode)
    {

        if (is_null($shippingServiceCode)) {
            throw new \InvalidArgumentException('non-nullable shippingServiceCode cannot be null');
        }

        $this->container['shippingServiceCode'] = $shippingServiceCode;

        return $this;
    }

    /**
     * Gets shipToLocations
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\RegionSet|null
     */
    public function getShipToLocations()
    {
        return $this->container['shipToLocations'];
    }

    /**
     * Sets shipToLocations
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\RegionSet|null $shipToLocations shipToLocations
     *
     * @return self
     */
    public function setShipToLocations($shipToLocations)
    {

        if (is_null($shipToLocations)) {
            throw new \InvalidArgumentException('non-nullable shipToLocations cannot be null');
        }

        $this->container['shipToLocations'] = $shipToLocations;

        return $this;
    }

    /**
     * Gets sortOrder
     *
     * @return int|null
     */
    public function getSortOrder()
    {
        return $this->container['sortOrder'];
    }

    /**
     * Sets sortOrder
     *
     * @param int|null $sortOrder The integer value set in this field controls the order of the corresponding domestic or international shipping service option in the View Item and Checkout pages. <br/><br/>Sellers can specify up to four domestic shipping services (in four separate <b>shippingService</b> containers), so valid values are 1, 2, 3, and 4. A shipping service option with a <b>sortOrder</b> value of <code>1</code> appears at the top of View Item and Checkout pages. Conversely, a shipping service option with a <b>sortOrder</b> value of <code>1</code> appears at the bottom of the list. <br/><br/>Sellers can specify up to five international shipping services (in five separate <b>shippingService</b> containers), so valid values for international shipping services are 1, 2, 3, 4, and 5. Similarly to domestic shipping service options, the <b>sortOrder</b> value of a international shipping service option controls the placement of that shipping service option in the View Item and Checkout pages. <br/><br/>If the <b>sortOrder</b> field is not supplied, the order of domestic and international shipping service options is determined by the order in which they are listed in the API call. <br/><br/><b>Min</b>: 1. <b>Max</b>: 4 (for domestic shipping service) or 5 (for international shipping service).
     *
     * @return self
     */
    public function setSortOrder($sortOrder)
    {

        if (is_null($sortOrder)) {
            throw new \InvalidArgumentException('non-nullable sortOrder cannot be null');
        }

        $this->container['sortOrder'] = $sortOrder;

        return $this;
    }

    /**
     * Gets surcharge
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\Amount|null
     */
    public function getSurcharge()
    {
        return $this->container['surcharge'];
    }

    /**
     * Sets surcharge
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\Amount|null $surcharge surcharge
     *
     * @return self
     */
    public function setSurcharge($surcharge)
    {

        if (is_null($surcharge)) {
            throw new \InvalidArgumentException('non-nullable surcharge cannot be null');
        }

        $this->container['surcharge'] = $surcharge;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


