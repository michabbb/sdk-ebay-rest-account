<?php
/**
 * FulfillmentPolicyRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\account
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.8.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\account\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\account\ObjectSerializer;

/**
 * FulfillmentPolicyRequest Class Doc Comment
 *
 * @category Class
 * @description This root container defines a seller&#39;s fulfillment policy for a specific marketplace and category group. This type is used when creating or updating a fulfillment business policy.
 * @package  macropage\SDKs\ebay\rest\account
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FulfillmentPolicyRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FulfillmentPolicyRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'categoryTypes' => '\macropage\SDKs\ebay\rest\account\Model\CategoryType[]',
        'description' => 'string',
        'freightShipping' => 'bool',
        'globalShipping' => 'bool',
        'handlingTime' => '\macropage\SDKs\ebay\rest\account\Model\TimeDuration',
        'localPickup' => 'bool',
        'marketplaceId' => 'string',
        'name' => 'string',
        'pickupDropOff' => 'bool',
        'shippingOptions' => '\macropage\SDKs\ebay\rest\account\Model\ShippingOption[]',
        'shipToLocations' => '\macropage\SDKs\ebay\rest\account\Model\RegionSet'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'categoryTypes' => null,
        'description' => null,
        'freightShipping' => null,
        'globalShipping' => null,
        'handlingTime' => null,
        'localPickup' => null,
        'marketplaceId' => null,
        'name' => null,
        'pickupDropOff' => null,
        'shippingOptions' => null,
        'shipToLocations' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'categoryTypes' => false,
		'description' => false,
		'freightShipping' => false,
		'globalShipping' => false,
		'handlingTime' => false,
		'localPickup' => false,
		'marketplaceId' => false,
		'name' => false,
		'pickupDropOff' => false,
		'shippingOptions' => false,
		'shipToLocations' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'categoryTypes' => 'categoryTypes',
        'description' => 'description',
        'freightShipping' => 'freightShipping',
        'globalShipping' => 'globalShipping',
        'handlingTime' => 'handlingTime',
        'localPickup' => 'localPickup',
        'marketplaceId' => 'marketplaceId',
        'name' => 'name',
        'pickupDropOff' => 'pickupDropOff',
        'shippingOptions' => 'shippingOptions',
        'shipToLocations' => 'shipToLocations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'categoryTypes' => 'setCategoryTypes',
        'description' => 'setDescription',
        'freightShipping' => 'setFreightShipping',
        'globalShipping' => 'setGlobalShipping',
        'handlingTime' => 'setHandlingTime',
        'localPickup' => 'setLocalPickup',
        'marketplaceId' => 'setMarketplaceId',
        'name' => 'setName',
        'pickupDropOff' => 'setPickupDropOff',
        'shippingOptions' => 'setShippingOptions',
        'shipToLocations' => 'setShipToLocations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'categoryTypes' => 'getCategoryTypes',
        'description' => 'getDescription',
        'freightShipping' => 'getFreightShipping',
        'globalShipping' => 'getGlobalShipping',
        'handlingTime' => 'getHandlingTime',
        'localPickup' => 'getLocalPickup',
        'marketplaceId' => 'getMarketplaceId',
        'name' => 'getName',
        'pickupDropOff' => 'getPickupDropOff',
        'shippingOptions' => 'getShippingOptions',
        'shipToLocations' => 'getShipToLocations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('categoryTypes', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('freightShipping', $data ?? [], null);
        $this->setIfExists('globalShipping', $data ?? [], null);
        $this->setIfExists('handlingTime', $data ?? [], null);
        $this->setIfExists('localPickup', $data ?? [], null);
        $this->setIfExists('marketplaceId', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('pickupDropOff', $data ?? [], null);
        $this->setIfExists('shippingOptions', $data ?? [], null);
        $this->setIfExists('shipToLocations', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets categoryTypes
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\CategoryType[]|null
     */
    public function getCategoryTypes()
    {
        return $this->container['categoryTypes'];
    }

    /**
     * Sets categoryTypes
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\CategoryType[]|null $categoryTypes This container is used to specify whether the fulfillment business policy applies to motor vehicle listings, or if it applies to non-motor vehicle listings.
     *
     * @return self
     */
    public function setCategoryTypes($categoryTypes)
    {

        if (is_null($categoryTypes)) {
            throw new \InvalidArgumentException('non-nullable categoryTypes cannot be null');
        }

        $this->container['categoryTypes'] = $categoryTypes;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A seller-defined description of the fulfillment policy. This description is only for the seller's use, and is not exposed on any eBay pages.  <br/><br/><b>Max length</b>: 250
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets freightShipping
     *
     * @return bool|null
     */
    public function getFreightShipping()
    {
        return $this->container['freightShipping'];
    }

    /**
     * Sets freightShipping
     *
     * @param bool|null $freightShipping This field is included and set to <code>true</code> if freight shipping is available for the item. Freight shipping can be used for large items over 150 lbs.<br/><br/><b>Default</b>: false
     *
     * @return self
     */
    public function setFreightShipping($freightShipping)
    {

        if (is_null($freightShipping)) {
            throw new \InvalidArgumentException('non-nullable freightShipping cannot be null');
        }

        $this->container['freightShipping'] = $freightShipping;

        return $this;
    }

    /**
     * Gets globalShipping
     *
     * @return bool|null
     */
    public function getGlobalShipping()
    {
        return $this->container['globalShipping'];
    }

    /**
     * Sets globalShipping
     *
     * @param bool|null $globalShipping This field is included and set to <code>true</code> if the seller wants to use the Global Shipping Program for international shipments. See the <a href=\"https://pages.ebay.com/help/sell/shipping-globally.html\">Global Shipping Program</a> help topic for more details and requirements on the Global Shipping Program.<br/><br/>It is possible for a seller to use a combination of the Global Shipping Program and other international shipping services. <br/><br/>If this value is set to <code>false</code> or if the field is omitted, the seller is responsible for manually specifying individual international shipping services (if the seller ships internationally)., as described in <a href=\"https://developer.ebay.com/api-docs/sell/static/seller-accounts/ht_shipping-worldwide.html\">Setting up worldwide shipping</a>. <br/><br/>Sellers can opt in or out of the Global Shipping Program through the Shipping preferences in My eBay.<p><b>Default</b>: false</p>
     *
     * @return self
     */
    public function setGlobalShipping($globalShipping)
    {

        if (is_null($globalShipping)) {
            throw new \InvalidArgumentException('non-nullable globalShipping cannot be null');
        }

        $this->container['globalShipping'] = $globalShipping;

        return $this;
    }

    /**
     * Gets handlingTime
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\TimeDuration|null
     */
    public function getHandlingTime()
    {
        return $this->container['handlingTime'];
    }

    /**
     * Sets handlingTime
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\TimeDuration|null $handlingTime handlingTime
     *
     * @return self
     */
    public function setHandlingTime($handlingTime)
    {

        if (is_null($handlingTime)) {
            throw new \InvalidArgumentException('non-nullable handlingTime cannot be null');
        }

        $this->container['handlingTime'] = $handlingTime;

        return $this;
    }

    /**
     * Gets localPickup
     *
     * @return bool|null
     */
    public function getLocalPickup()
    {
        return $this->container['localPickup'];
    }

    /**
     * Sets localPickup
     *
     * @param bool|null $localPickup This field should be included and set to <code>true</code> if local pickup is one of the fulfillment options available to the buyer. It is possible for the seller to make local pickup and some shipping service options available to the buyer.<br/><br/>With local pickup, the buyer and seller make arrangements for pickup time and location.<br/><br/><b>Default</b>: <code>false</code>
     *
     * @return self
     */
    public function setLocalPickup($localPickup)
    {

        if (is_null($localPickup)) {
            throw new \InvalidArgumentException('non-nullable localPickup cannot be null');
        }

        $this->container['localPickup'] = $localPickup;

        return $this;
    }

    /**
     * Gets marketplaceId
     *
     * @return string|null
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string|null $marketplaceId The ID of the eBay marketplace to which this fulfillment policy applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setMarketplaceId($marketplaceId)
    {

        if (is_null($marketplaceId)) {
            throw new \InvalidArgumentException('non-nullable marketplaceId cannot be null');
        }

        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name A seller-defined name for this fulfillment policy. Names must be unique for policies assigned to the same marketplace. <br/><br/><b>Max length</b>: 64
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pickupDropOff
     *
     * @return bool|null
     */
    public function getPickupDropOff()
    {
        return $this->container['pickupDropOff'];
    }

    /**
     * Sets pickupDropOff
     *
     * @param bool|null $pickupDropOff This field should be included and set to <code>true</code> if the seller offers the \"Click and Collect\" feature for an item. <p>To enable \"Click and Collect\" on a listing, a seller must be eligible for Click and Collect. Currently, Click and Collect is available to only large retail merchants selling in the eBay AU and UK marketplaces.</p>  <p>In addition to setting this field to <code>true</code>, the merchant must also do the following to enable the \"Click and Collect\" option on a listing: <ul><li>Have inventory for the product at one or more physical stores tied to the merchant's account. <p>Sellers can use the <b>createInventoryLocaion</b> method in the Inventory API to associate physical stores to their account and they can then can add inventory to specific store locations.</p></li><li>Set an immediate payment requirement on the item. The immediate payment feature requires the seller to: <ul><li>Set the <b>immediatePay</b> flag in the payment policy to 'true'.</li><li>Have a valid store location with a complete street address.</li></ul></li></ul><p>When a merchant successfully lists an item with Click and Collect, prospective buyers within a reasonable distance from one of the merchant's stores (that has stock available) will see the \"Available for Click and Collect\" option on the listing, along with information on the closest store that has the item.</p><b>Default</b>: false
     *
     * @return self
     */
    public function setPickupDropOff($pickupDropOff)
    {

        if (is_null($pickupDropOff)) {
            throw new \InvalidArgumentException('non-nullable pickupDropOff cannot be null');
        }

        $this->container['pickupDropOff'] = $pickupDropOff;

        return $this;
    }

    /**
     * Gets shippingOptions
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\ShippingOption[]|null
     */
    public function getShippingOptions()
    {
        return $this->container['shippingOptions'];
    }

    /**
     * Sets shippingOptions
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\ShippingOption[]|null $shippingOptions This array is used to provide detailed information on the domestic and international shipping options available for the policy. A separate <b>ShippingOption</b> object is required for domestic shipping service options and for international shipping service options (if the seller ships to international locations). The <b>optionType</b> field is used to indicate whether the <b>ShippingOption</b> object applies to domestic or international shipping, and the <b>costType</b> field is used to indicate whether flat-rate shipping or calculated shipping will be used. The <b>rateTableId</b> field can be used to associate a defined shipping rate table to the policy, and the <b>packageHandlingCost</b> container can be used to set a handling charge for the policy. <p>A separate <b>ShippingServices</b> object will be used to specify cost and other details for every available domestic and international shipping service option. </p>
     *
     * @return self
     */
    public function setShippingOptions($shippingOptions)
    {

        if (is_null($shippingOptions)) {
            throw new \InvalidArgumentException('non-nullable shippingOptions cannot be null');
        }

        $this->container['shippingOptions'] = $shippingOptions;

        return $this;
    }

    /**
     * Gets shipToLocations
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\RegionSet|null
     */
    public function getShipToLocations()
    {
        return $this->container['shipToLocations'];
    }

    /**
     * Sets shipToLocations
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\RegionSet|null $shipToLocations shipToLocations
     *
     * @return self
     */
    public function setShipToLocations($shipToLocations)
    {

        if (is_null($shipToLocations)) {
            throw new \InvalidArgumentException('non-nullable shipToLocations cannot be null');
        }

        $this->container['shipToLocations'] = $shipToLocations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


