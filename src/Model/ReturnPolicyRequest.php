<?php
/**
 * ReturnPolicyRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\account
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.8.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\account\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\account\ObjectSerializer;

/**
 * ReturnPolicyRequest Class Doc Comment
 *
 * @category Class
 * @description This root container defines a seller&#39;s return business policy for a specific marketplace and category group. This type is used when creating or updating a return business policy.
 * @package  macropage\SDKs\ebay\rest\account
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReturnPolicyRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReturnPolicyRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'categoryTypes' => '\macropage\SDKs\ebay\rest\account\Model\CategoryType[]',
        'description' => 'string',
        'extendedHolidayReturnsOffered' => 'bool',
        'internationalOverride' => '\macropage\SDKs\ebay\rest\account\Model\InternationalReturnOverrideType',
        'marketplaceId' => 'string',
        'name' => 'string',
        'refundMethod' => 'string',
        'restockingFeePercentage' => 'string',
        'returnInstructions' => 'string',
        'returnMethod' => 'string',
        'returnPeriod' => '\macropage\SDKs\ebay\rest\account\Model\TimeDuration',
        'returnsAccepted' => 'bool',
        'returnShippingCostPayer' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'categoryTypes' => null,
        'description' => null,
        'extendedHolidayReturnsOffered' => null,
        'internationalOverride' => null,
        'marketplaceId' => null,
        'name' => null,
        'refundMethod' => null,
        'restockingFeePercentage' => null,
        'returnInstructions' => null,
        'returnMethod' => null,
        'returnPeriod' => null,
        'returnsAccepted' => null,
        'returnShippingCostPayer' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'categoryTypes' => false,
		'description' => false,
		'extendedHolidayReturnsOffered' => false,
		'internationalOverride' => false,
		'marketplaceId' => false,
		'name' => false,
		'refundMethod' => false,
		'restockingFeePercentage' => false,
		'returnInstructions' => false,
		'returnMethod' => false,
		'returnPeriod' => false,
		'returnsAccepted' => false,
		'returnShippingCostPayer' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'categoryTypes' => 'categoryTypes',
        'description' => 'description',
        'extendedHolidayReturnsOffered' => 'extendedHolidayReturnsOffered',
        'internationalOverride' => 'internationalOverride',
        'marketplaceId' => 'marketplaceId',
        'name' => 'name',
        'refundMethod' => 'refundMethod',
        'restockingFeePercentage' => 'restockingFeePercentage',
        'returnInstructions' => 'returnInstructions',
        'returnMethod' => 'returnMethod',
        'returnPeriod' => 'returnPeriod',
        'returnsAccepted' => 'returnsAccepted',
        'returnShippingCostPayer' => 'returnShippingCostPayer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'categoryTypes' => 'setCategoryTypes',
        'description' => 'setDescription',
        'extendedHolidayReturnsOffered' => 'setExtendedHolidayReturnsOffered',
        'internationalOverride' => 'setInternationalOverride',
        'marketplaceId' => 'setMarketplaceId',
        'name' => 'setName',
        'refundMethod' => 'setRefundMethod',
        'restockingFeePercentage' => 'setRestockingFeePercentage',
        'returnInstructions' => 'setReturnInstructions',
        'returnMethod' => 'setReturnMethod',
        'returnPeriod' => 'setReturnPeriod',
        'returnsAccepted' => 'setReturnsAccepted',
        'returnShippingCostPayer' => 'setReturnShippingCostPayer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'categoryTypes' => 'getCategoryTypes',
        'description' => 'getDescription',
        'extendedHolidayReturnsOffered' => 'getExtendedHolidayReturnsOffered',
        'internationalOverride' => 'getInternationalOverride',
        'marketplaceId' => 'getMarketplaceId',
        'name' => 'getName',
        'refundMethod' => 'getRefundMethod',
        'restockingFeePercentage' => 'getRestockingFeePercentage',
        'returnInstructions' => 'getReturnInstructions',
        'returnMethod' => 'getReturnMethod',
        'returnPeriod' => 'getReturnPeriod',
        'returnsAccepted' => 'getReturnsAccepted',
        'returnShippingCostPayer' => 'getReturnShippingCostPayer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('categoryTypes', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('extendedHolidayReturnsOffered', $data ?? [], null);
        $this->setIfExists('internationalOverride', $data ?? [], null);
        $this->setIfExists('marketplaceId', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('refundMethod', $data ?? [], null);
        $this->setIfExists('restockingFeePercentage', $data ?? [], null);
        $this->setIfExists('returnInstructions', $data ?? [], null);
        $this->setIfExists('returnMethod', $data ?? [], null);
        $this->setIfExists('returnPeriod', $data ?? [], null);
        $this->setIfExists('returnsAccepted', $data ?? [], null);
        $this->setIfExists('returnShippingCostPayer', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets categoryTypes
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\CategoryType[]|null
     */
    public function getCategoryTypes()
    {
        return $this->container['categoryTypes'];
    }

    /**
     * Sets categoryTypes
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\CategoryType[]|null $categoryTypes This container indicates which category group that the return policy applies to.<br/><br/><span class=\"tablenote\"><b>Note</b>: Return business policies are not applicable to motor vehicle listings, so the <b>categoryTypes.name</b> value must be set to <code>ALL_EXCLUDING_MOTORS_VEHICLES</code> for return business policies.</span>
     *
     * @return self
     */
    public function setCategoryTypes($categoryTypes)
    {

        if (is_null($categoryTypes)) {
            throw new \InvalidArgumentException('non-nullable categoryTypes cannot be null');
        }

        $this->container['categoryTypes'] = $categoryTypes;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A seller-defined description of the return business policy. This description is only for the seller's use, and is not exposed on any eBay pages.  <br/><br/><b>Max length</b>: 250
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets extendedHolidayReturnsOffered
     *
     * @return bool|null
     */
    public function getExtendedHolidayReturnsOffered()
    {
        return $this->container['extendedHolidayReturnsOffered'];
    }

    /**
     * Sets extendedHolidayReturnsOffered
     *
     * @param bool|null $extendedHolidayReturnsOffered <p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> This field is deprecated, since eBay no longer supports extended holiday returns. Any value supplied in this field is neither read nor returned.</p>
     *
     * @return self
     */
    public function setExtendedHolidayReturnsOffered($extendedHolidayReturnsOffered)
    {

        if (is_null($extendedHolidayReturnsOffered)) {
            throw new \InvalidArgumentException('non-nullable extendedHolidayReturnsOffered cannot be null');
        }

        $this->container['extendedHolidayReturnsOffered'] = $extendedHolidayReturnsOffered;

        return $this;
    }

    /**
     * Gets internationalOverride
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\InternationalReturnOverrideType|null
     */
    public function getInternationalOverride()
    {
        return $this->container['internationalOverride'];
    }

    /**
     * Sets internationalOverride
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\InternationalReturnOverrideType|null $internationalOverride internationalOverride
     *
     * @return self
     */
    public function setInternationalOverride($internationalOverride)
    {

        if (is_null($internationalOverride)) {
            throw new \InvalidArgumentException('non-nullable internationalOverride cannot be null');
        }

        $this->container['internationalOverride'] = $internationalOverride;

        return $this;
    }

    /**
     * Gets marketplaceId
     *
     * @return string|null
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string|null $marketplaceId The ID of the eBay marketplace to which this return business policy applies.  For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setMarketplaceId($marketplaceId)
    {

        if (is_null($marketplaceId)) {
            throw new \InvalidArgumentException('non-nullable marketplaceId cannot be null');
        }

        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name A seller-defined name for this return business policy. Names must be unique for policies assigned to the same marketplace. <br/><br/><b>Max length</b>: 64
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets refundMethod
     *
     * @return string|null
     */
    public function getRefundMethod()
    {
        return $this->container['refundMethod'];
    }

    /**
     * Sets refundMethod
     *
     * @param string|null $refundMethod This value indicates the refund method that will be used by the seller for buyer returns. In most cases, buyers will get their money back for returns, but for sellers who offer the 'Click and Collect' and 'Buy Online, Pick up in Store' option, the seller is able to offer a store/merchandise credit in addition to the 'money back' option. The buyer recieving money back for a return is always an option available to the buyer, even if this field is set to <code>MERCHANDISE_CREDIT</code>.<p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> If this field is not included in a return business policy, the seller will still have the money back option in the case of a return.</p> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:RefundMethodEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setRefundMethod($refundMethod)
    {

        if (is_null($refundMethod)) {
            throw new \InvalidArgumentException('non-nullable refundMethod cannot be null');
        }

        $this->container['refundMethod'] = $refundMethod;

        return $this;
    }

    /**
     * Gets restockingFeePercentage
     *
     * @return string|null
     */
    public function getRestockingFeePercentage()
    {
        return $this->container['restockingFeePercentage'];
    }

    /**
     * Sets restockingFeePercentage
     *
     * @param string|null $restockingFeePercentage <p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> This field is deprecated, since eBay no longer allows sellers to charge a restocking fee for buyer remorse returns. If this field is included, it is ignored.</p>
     *
     * @return self
     */
    public function setRestockingFeePercentage($restockingFeePercentage)
    {

        if (is_null($restockingFeePercentage)) {
            throw new \InvalidArgumentException('non-nullable restockingFeePercentage cannot be null');
        }

        $this->container['restockingFeePercentage'] = $restockingFeePercentage;

        return $this;
    }

    /**
     * Gets returnInstructions
     *
     * @return string|null
     */
    public function getReturnInstructions()
    {
        return $this->container['returnInstructions'];
    }

    /**
     * Sets returnInstructions
     *
     * @param string|null $returnInstructions This text-based field provides more details on seller-specified return instructions. <p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> This field is no longer supported on many eBay marketplaces. To see if a marketplace and eBay category does support this field, call <a href=\"/api-docs/sell/metadata/resources/marketplace/methods/getReturnPolicies\">getReturnPolicies</a> method of the <b>Metadata API</b>. Then you will look for the <b>policyDescriptionEnabled</b> field with a value of <code>true</code> for the eBay category.</span></p><br/><b>Max length</b>: 5000 (8000 for DE)
     *
     * @return self
     */
    public function setReturnInstructions($returnInstructions)
    {

        if (is_null($returnInstructions)) {
            throw new \InvalidArgumentException('non-nullable returnInstructions cannot be null');
        }

        $this->container['returnInstructions'] = $returnInstructions;

        return $this;
    }

    /**
     * Gets returnMethod
     *
     * @return string|null
     */
    public function getReturnMethod()
    {
        return $this->container['returnMethod'];
    }

    /**
     * Sets returnMethod
     *
     * @param string|null $returnMethod This field can be used if the seller is willing and able to offer an alternative return method other than 'money back', such as an exchange or replacement item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnMethodEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setReturnMethod($returnMethod)
    {

        if (is_null($returnMethod)) {
            throw new \InvalidArgumentException('non-nullable returnMethod cannot be null');
        }

        $this->container['returnMethod'] = $returnMethod;

        return $this;
    }

    /**
     * Gets returnPeriod
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\TimeDuration|null
     */
    public function getReturnPeriod()
    {
        return $this->container['returnPeriod'];
    }

    /**
     * Sets returnPeriod
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\TimeDuration|null $returnPeriod returnPeriod
     *
     * @return self
     */
    public function setReturnPeriod($returnPeriod)
    {

        if (is_null($returnPeriod)) {
            throw new \InvalidArgumentException('non-nullable returnPeriod cannot be null');
        }

        $this->container['returnPeriod'] = $returnPeriod;

        return $this;
    }

    /**
     * Gets returnsAccepted
     *
     * @return bool|null
     */
    public function getReturnsAccepted()
    {
        return $this->container['returnsAccepted'];
    }

    /**
     * Sets returnsAccepted
     *
     * @param bool|null $returnsAccepted If set to <code>true</code>, the seller accepts returns. <p><span class=\"tablenote\"><strong>Note:</strong>Top-Rated sellers must accept item returns and the <b>handlingTime</b> should be set to zero days or one day for a listing to receive a Top-Rated Plus badge on the View Item or search result pages. For more information on eBay's Top-Rated seller program, see <a href=\"http://pages.ebay.com/help/sell/top-rated.html\">Becoming a Top Rated Seller and qualifying for Top Rated Plus benefits</a>.</span></p>
     *
     * @return self
     */
    public function setReturnsAccepted($returnsAccepted)
    {

        if (is_null($returnsAccepted)) {
            throw new \InvalidArgumentException('non-nullable returnsAccepted cannot be null');
        }

        $this->container['returnsAccepted'] = $returnsAccepted;

        return $this;
    }

    /**
     * Gets returnShippingCostPayer
     *
     * @return string|null
     */
    public function getReturnShippingCostPayer()
    {
        return $this->container['returnShippingCostPayer'];
    }

    /**
     * Sets returnShippingCostPayer
     *
     * @param string|null $returnShippingCostPayer This field indicates who is responsible for paying for the shipping charges for returned items. The field can be set to either <code>BUYER</code> or <code>SELLER</code>.  <br/><br/>Depending on the return policy and specifics of the return, either the buyer or the seller can be responsible for the return shipping costs. Note that the seller is always responsible for return shipping costs for SNAD-related issues.  <br/><br/>This field is conditionally required if <b>returnsAccepted</b> is set to <code>true</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnShippingCostPayerEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setReturnShippingCostPayer($returnShippingCostPayer)
    {

        if (is_null($returnShippingCostPayer)) {
            throw new \InvalidArgumentException('non-nullable returnShippingCostPayer cannot be null');
        }

        $this->container['returnShippingCostPayer'] = $returnShippingCostPayer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


