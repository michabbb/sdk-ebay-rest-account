<?php
/**
 * SetReturnPolicyResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\account
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (the Fulfillment Policy, Payment Policy, and Return Policy), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br><br>For details on the restrictions and availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#acct-restrictions\">API restrictions</a>.
 *
 * OpenAPI spec version: v1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\account\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\account\ObjectSerializer;

/**
 * SetReturnPolicyResponse Class Doc Comment
 *
 * @category Class
 * @description Complex type that that gets populated with a response containing a return policy.
 * @package  macropage\SDKs\ebay\rest\account
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SetReturnPolicyResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SetReturnPolicyResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'categoryTypes' => '\macropage\SDKs\ebay\rest\account\Model\CategoryType[]',
        'description' => 'string',
        'extendedHolidayReturnsOffered' => 'bool',
        'internationalOverride' => '\macropage\SDKs\ebay\rest\account\Model\InternationalReturnOverrideType',
        'marketplaceId' => 'string',
        'name' => 'string',
        'refundMethod' => 'string',
        'restockingFeePercentage' => 'string',
        'returnInstructions' => 'string',
        'returnMethod' => 'string',
        'returnPeriod' => '\macropage\SDKs\ebay\rest\account\Model\TimeDuration',
        'returnPolicyId' => 'string',
        'returnsAccepted' => 'bool',
        'returnShippingCostPayer' => 'string',
        'warnings' => '\macropage\SDKs\ebay\rest\account\Model\Error[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'categoryTypes' => null,
        'description' => null,
        'extendedHolidayReturnsOffered' => null,
        'internationalOverride' => null,
        'marketplaceId' => null,
        'name' => null,
        'refundMethod' => null,
        'restockingFeePercentage' => null,
        'returnInstructions' => null,
        'returnMethod' => null,
        'returnPeriod' => null,
        'returnPolicyId' => null,
        'returnsAccepted' => null,
        'returnShippingCostPayer' => null,
        'warnings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'categoryTypes' => 'categoryTypes',
        'description' => 'description',
        'extendedHolidayReturnsOffered' => 'extendedHolidayReturnsOffered',
        'internationalOverride' => 'internationalOverride',
        'marketplaceId' => 'marketplaceId',
        'name' => 'name',
        'refundMethod' => 'refundMethod',
        'restockingFeePercentage' => 'restockingFeePercentage',
        'returnInstructions' => 'returnInstructions',
        'returnMethod' => 'returnMethod',
        'returnPeriod' => 'returnPeriod',
        'returnPolicyId' => 'returnPolicyId',
        'returnsAccepted' => 'returnsAccepted',
        'returnShippingCostPayer' => 'returnShippingCostPayer',
        'warnings' => 'warnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'categoryTypes' => 'setCategoryTypes',
        'description' => 'setDescription',
        'extendedHolidayReturnsOffered' => 'setExtendedHolidayReturnsOffered',
        'internationalOverride' => 'setInternationalOverride',
        'marketplaceId' => 'setMarketplaceId',
        'name' => 'setName',
        'refundMethod' => 'setRefundMethod',
        'restockingFeePercentage' => 'setRestockingFeePercentage',
        'returnInstructions' => 'setReturnInstructions',
        'returnMethod' => 'setReturnMethod',
        'returnPeriod' => 'setReturnPeriod',
        'returnPolicyId' => 'setReturnPolicyId',
        'returnsAccepted' => 'setReturnsAccepted',
        'returnShippingCostPayer' => 'setReturnShippingCostPayer',
        'warnings' => 'setWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'categoryTypes' => 'getCategoryTypes',
        'description' => 'getDescription',
        'extendedHolidayReturnsOffered' => 'getExtendedHolidayReturnsOffered',
        'internationalOverride' => 'getInternationalOverride',
        'marketplaceId' => 'getMarketplaceId',
        'name' => 'getName',
        'refundMethod' => 'getRefundMethod',
        'restockingFeePercentage' => 'getRestockingFeePercentage',
        'returnInstructions' => 'getReturnInstructions',
        'returnMethod' => 'getReturnMethod',
        'returnPeriod' => 'getReturnPeriod',
        'returnPolicyId' => 'getReturnPolicyId',
        'returnsAccepted' => 'getReturnsAccepted',
        'returnShippingCostPayer' => 'getReturnShippingCostPayer',
        'warnings' => 'getWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['categoryTypes'] = isset($data['categoryTypes']) ? $data['categoryTypes'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['extendedHolidayReturnsOffered'] = isset($data['extendedHolidayReturnsOffered']) ? $data['extendedHolidayReturnsOffered'] : null;
        $this->container['internationalOverride'] = isset($data['internationalOverride']) ? $data['internationalOverride'] : null;
        $this->container['marketplaceId'] = isset($data['marketplaceId']) ? $data['marketplaceId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['refundMethod'] = isset($data['refundMethod']) ? $data['refundMethod'] : null;
        $this->container['restockingFeePercentage'] = isset($data['restockingFeePercentage']) ? $data['restockingFeePercentage'] : null;
        $this->container['returnInstructions'] = isset($data['returnInstructions']) ? $data['returnInstructions'] : null;
        $this->container['returnMethod'] = isset($data['returnMethod']) ? $data['returnMethod'] : null;
        $this->container['returnPeriod'] = isset($data['returnPeriod']) ? $data['returnPeriod'] : null;
        $this->container['returnPolicyId'] = isset($data['returnPolicyId']) ? $data['returnPolicyId'] : null;
        $this->container['returnsAccepted'] = isset($data['returnsAccepted']) ? $data['returnsAccepted'] : null;
        $this->container['returnShippingCostPayer'] = isset($data['returnShippingCostPayer']) ? $data['returnShippingCostPayer'] : null;
        $this->container['warnings'] = isset($data['warnings']) ? $data['warnings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets categoryTypes
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\CategoryType[]|null
     */
    public function getCategoryTypes()
    {
        return $this->container['categoryTypes'];
    }

    /**
     * Sets categoryTypes
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\CategoryType[]|null $categoryTypes For return policies, this field always returns ALL_EXCLUDING_MOTORS_VEHICLES (returns on motor vehicles are not processed through eBay flows.) Default: ALL_EXCLUDING_MOTORS_VEHICLES (for return policies only)
     *
     * @return $this
     */
    public function setCategoryTypes($categoryTypes)
    {
        $this->container['categoryTypes'] = $categoryTypes;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description An optional seller-defined description of the return policy for internal use (this value is not displayed to end users).
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets extendedHolidayReturnsOffered
     *
     * @return bool|null
     */
    public function getExtendedHolidayReturnsOffered()
    {
        return $this->container['extendedHolidayReturnsOffered'];
    }

    /**
     * Sets extendedHolidayReturnsOffered
     *
     * @param bool|null $extendedHolidayReturnsOffered Important! This field has been deprecated as of version 1.2.0, released on May 31, 2018. Any value supplied in this field is ignored, it is neither read nor returned. If set to true, the seller offers an Extended Holiday Returns policy for their listings. IMPORTANT: Extended Holiday Returns is a seasonally available feature that is offered on some eBay marketplaces. To see if the feature is enabled in any given year, check the eBay Seller Center Returns on eBay page of before the holiday season begins.
     *
     * @return $this
     */
    public function setExtendedHolidayReturnsOffered($extendedHolidayReturnsOffered)
    {
        $this->container['extendedHolidayReturnsOffered'] = $extendedHolidayReturnsOffered;

        return $this;
    }

    /**
     * Gets internationalOverride
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\InternationalReturnOverrideType|null
     */
    public function getInternationalOverride()
    {
        return $this->container['internationalOverride'];
    }

    /**
     * Sets internationalOverride
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\InternationalReturnOverrideType|null $internationalOverride internationalOverride
     *
     * @return $this
     */
    public function setInternationalOverride($internationalOverride)
    {
        $this->container['internationalOverride'] = $internationalOverride;

        return $this;
    }

    /**
     * Gets marketplaceId
     *
     * @return string|null
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string|null $marketplaceId The ID of the eBay marketplace to which this return policy applies. If this value is not specified, value defaults to the seller's eBay registration site. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/account/types/MarketplaceIdEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setMarketplaceId($marketplaceId)
    {
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name A user-defined name for this return policy. Names must be unique for policies assigned to the same marketplace. Max length: 64
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets refundMethod
     *
     * @return string|null
     */
    public function getRefundMethod()
    {
        return $this->container['refundMethod'];
    }

    /**
     * Sets refundMethod
     *
     * @param string|null $refundMethod Important! This field has been deprecated as of version 1.2.0, released on May 31, 2018. Any value other than MONEY_BACK will be treated as MONEY_BACK (although for a period of time, eBay will store and return the legacy values to preserve backwards compatibility). Indicates the method the seller uses to compensate the buyer for returned items. The return method specified applies only to remorse returns. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/account/types/RefundMethodEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setRefundMethod($refundMethod)
    {
        $this->container['refundMethod'] = $refundMethod;

        return $this;
    }

    /**
     * Gets restockingFeePercentage
     *
     * @return string|null
     */
    public function getRestockingFeePercentage()
    {
        return $this->container['restockingFeePercentage'];
    }

    /**
     * Sets restockingFeePercentage
     *
     * @param string|null $restockingFeePercentage Important! This field has been deprecated as of version 1.2.0, released on May 31, 2018. Any value supplied in this field is ignored, it is neither read nor returned. Optionally set by the seller, the percentage charged if the seller charges buyers a a restocking fee when items are returned due to buyer remorse and/or a purchasing mistake. The total amount charged to the buyer is the cost of the item multiplied by the percentage indicated in this field.
     *
     * @return $this
     */
    public function setRestockingFeePercentage($restockingFeePercentage)
    {
        $this->container['restockingFeePercentage'] = $restockingFeePercentage;

        return $this;
    }

    /**
     * Gets returnInstructions
     *
     * @return string|null
     */
    public function getReturnInstructions()
    {
        return $this->container['returnInstructions'];
    }

    /**
     * Sets returnInstructions
     *
     * @param string|null $returnInstructions This field contains the seller's detailed explanation for their return policy and is displayed in the Return Policy section of the View Item page. This field is valid in only the following marketplaces (the field is otherwise ignored): Germany (DE) Spain (ES) France (FR) Italy (IT)
     *
     * @return $this
     */
    public function setReturnInstructions($returnInstructions)
    {
        $this->container['returnInstructions'] = $returnInstructions;

        return $this;
    }

    /**
     * Gets returnMethod
     *
     * @return string|null
     */
    public function getReturnMethod()
    {
        return $this->container['returnMethod'];
    }

    /**
     * Sets returnMethod
     *
     * @param string|null $returnMethod This field indicates the method in which the seller handles non-money back return requests for remorse returns. This field is valid in only the US marketplace and the only valid value is REPLACEMENT. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/account/types/ReturnMethodEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setReturnMethod($returnMethod)
    {
        $this->container['returnMethod'] = $returnMethod;

        return $this;
    }

    /**
     * Gets returnPeriod
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\TimeDuration|null
     */
    public function getReturnPeriod()
    {
        return $this->container['returnPeriod'];
    }

    /**
     * Sets returnPeriod
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\TimeDuration|null $returnPeriod returnPeriod
     *
     * @return $this
     */
    public function setReturnPeriod($returnPeriod)
    {
        $this->container['returnPeriod'] = $returnPeriod;

        return $this;
    }

    /**
     * Gets returnPolicyId
     *
     * @return string|null
     */
    public function getReturnPolicyId()
    {
        return $this->container['returnPolicyId'];
    }

    /**
     * Sets returnPolicyId
     *
     * @param string|null $returnPolicyId A unique eBay-assigned ID for a return policy. This ID is generated when the policy is created.
     *
     * @return $this
     */
    public function setReturnPolicyId($returnPolicyId)
    {
        $this->container['returnPolicyId'] = $returnPolicyId;

        return $this;
    }

    /**
     * Gets returnsAccepted
     *
     * @return bool|null
     */
    public function getReturnsAccepted()
    {
        return $this->container['returnsAccepted'];
    }

    /**
     * Sets returnsAccepted
     *
     * @param bool|null $returnsAccepted If set to true, the seller accepts returns. If set to false, this field indicates that the seller does not accept returns.
     *
     * @return $this
     */
    public function setReturnsAccepted($returnsAccepted)
    {
        $this->container['returnsAccepted'] = $returnsAccepted;

        return $this;
    }

    /**
     * Gets returnShippingCostPayer
     *
     * @return string|null
     */
    public function getReturnShippingCostPayer()
    {
        return $this->container['returnShippingCostPayer'];
    }

    /**
     * Sets returnShippingCostPayer
     *
     * @param string|null $returnShippingCostPayer This field indicates who is responsible for paying for the shipping charges for returned items. The field can be set to either BUYER or SELLER. Depending on the return policy and specifics of the return, either the buyer or the seller can be responsible for the return shipping costs. Note that the seller is always responsible for return shipping costs for SNAD-related issues. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/account/types/ReturnShippingCostPayerEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setReturnShippingCostPayer($returnShippingCostPayer)
    {
        $this->container['returnShippingCostPayer'] = $returnShippingCostPayer;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \macropage\SDKs\ebay\rest\account\Model\Error[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \macropage\SDKs\ebay\rest\account\Model\Error[]|null $warnings A list of warnings related to request. This field normally returns empty, which indicates the request did not generate any warnings.
     *
     * @return $this
     */
    public function setWarnings($warnings)
    {
        $this->container['warnings'] = $warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


