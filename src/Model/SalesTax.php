<?php
/**
 * SalesTax
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\account
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (the Fulfillment Policy, Payment Policy, and Return Policy), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br><br>For details on the restrictions and availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#acct-restrictions\">API restrictions</a>.
 *
 * The version of the OpenAPI document: v1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\account\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\account\ObjectSerializer;

/**
 * SalesTax Class Doc Comment
 *
 * @category Class
 * @description The applicable sales tax rate, as a percentage of the sale amount, for a given country and sales tax jurisdiction within that country.
 * @package  macropage\SDKs\ebay\rest\account
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SalesTax implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SalesTax';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'countryCode' => 'string',
        'salesTaxJurisdictionId' => 'string',
        'salesTaxPercentage' => 'string',
        'shippingAndHandlingTaxed' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'countryCode' => null,
        'salesTaxJurisdictionId' => null,
        'salesTaxPercentage' => null,
        'shippingAndHandlingTaxed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'countryCode' => 'countryCode',
        'salesTaxJurisdictionId' => 'salesTaxJurisdictionId',
        'salesTaxPercentage' => 'salesTaxPercentage',
        'shippingAndHandlingTaxed' => 'shippingAndHandlingTaxed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'countryCode' => 'setCountryCode',
        'salesTaxJurisdictionId' => 'setSalesTaxJurisdictionId',
        'salesTaxPercentage' => 'setSalesTaxPercentage',
        'shippingAndHandlingTaxed' => 'setShippingAndHandlingTaxed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'countryCode' => 'getCountryCode',
        'salesTaxJurisdictionId' => 'getSalesTaxJurisdictionId',
        'salesTaxPercentage' => 'getSalesTaxPercentage',
        'shippingAndHandlingTaxed' => 'getShippingAndHandlingTaxed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['countryCode'] = isset($data['countryCode']) ? $data['countryCode'] : null;
        $this->container['salesTaxJurisdictionId'] = isset($data['salesTaxJurisdictionId']) ? $data['salesTaxJurisdictionId'] : null;
        $this->container['salesTaxPercentage'] = isset($data['salesTaxPercentage']) ? $data['salesTaxPercentage'] : null;
        $this->container['shippingAndHandlingTaxed'] = isset($data['shippingAndHandlingTaxed']) ? $data['shippingAndHandlingTaxed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets countryCode
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string|null $countryCode The country code identifying the country to which this tax rate applies. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/account/types/CountryCodeEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setCountryCode($countryCode)
    {
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets salesTaxJurisdictionId
     *
     * @return string|null
     */
    public function getSalesTaxJurisdictionId()
    {
        return $this->container['salesTaxJurisdictionId'];
    }

    /**
     * Sets salesTaxJurisdictionId
     *
     * @param string|null $salesTaxJurisdictionId A unique ID that identifies the sales tax jurisdiction to which the tax rate applies (for example a state within the United States).
     *
     * @return $this
     */
    public function setSalesTaxJurisdictionId($salesTaxJurisdictionId)
    {
        $this->container['salesTaxJurisdictionId'] = $salesTaxJurisdictionId;

        return $this;
    }

    /**
     * Gets salesTaxPercentage
     *
     * @return string|null
     */
    public function getSalesTaxPercentage()
    {
        return $this->container['salesTaxPercentage'];
    }

    /**
     * Sets salesTaxPercentage
     *
     * @param string|null $salesTaxPercentage The sales tax rate (as a percentage of the sale) applied to sales transactions made in this country and sales tax jurisdiction.
     *
     * @return $this
     */
    public function setSalesTaxPercentage($salesTaxPercentage)
    {
        $this->container['salesTaxPercentage'] = $salesTaxPercentage;

        return $this;
    }

    /**
     * Gets shippingAndHandlingTaxed
     *
     * @return bool|null
     */
    public function getShippingAndHandlingTaxed()
    {
        return $this->container['shippingAndHandlingTaxed'];
    }

    /**
     * Sets shippingAndHandlingTaxed
     *
     * @param bool|null $shippingAndHandlingTaxed If set to true, shipping and handling charges are taxed.
     *
     * @return $this
     */
    public function setShippingAndHandlingTaxed($shippingAndHandlingTaxed)
    {
        $this->container['shippingAndHandlingTaxed'] = $shippingAndHandlingTaxed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


